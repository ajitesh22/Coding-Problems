class Solution {
public:
    
    int dp[100][101];
    
    int solve(vector<int>& piles , int idx ,int M){
        
        int n = piles.size();
        if(idx>=n)
            return 0;
        
        if(dp[idx][M]!=-1)
            return dp[idx][M];
        int currMax = INT_MIN , psum = 0;
        for(int i = 0 ; i< 2*M   ; i++){
            if(i+idx<n)
            psum += piles[idx + i];
            currMax = max(currMax , psum - solve(piles ,i + idx + 1 , max(i +  1 , M)));
        }
        
        return dp[idx][M] = currMax ; 
    }
     
    int stoneGameII(vector<int>& piles) {
        
        int sum = 0;
        memset(dp , -1 ,sizeof dp);
        for(int i=0;i<piles.size();i++)
            sum+=piles[i];
        
        int diff = solve(piles , 0 , 1);
        
        return (sum + diff)/2;
        
    }
};
